name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Create jest-preset.js (Required for Jest configuration)
      run: |
        mkdir -p node_modules/@babel/preset-env
        echo 'module.exports = require("@babel/preset-env");' > node_modules/@babel/preset-env/jest-preset.js
        
    - name: Run tests
      run: pnpm test
      env:
        NODE_ENV: test
        AUTH_SEED: test-auth-seed-for-ci
        OPENAI_API_KEY: test-openai-key
        PINECONE_API_KEY: test-pinecone-key
        
    - name: Run tests with coverage
      run: pnpm test:coverage
      env:
        NODE_ENV: test
        AUTH_SEED: test-auth-seed-for-ci
        OPENAI_API_KEY: test-openai-key
        PINECONE_API_KEY: test-pinecone-key
        
    - name: Upload coverage reports
      if: ${{ vars.ENABLE_CODECOV == 'true' }}
      uses: codecov/codecov-action@v3
      with:
        token: ${{ vars.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run security audit
      run: pnpm audit --audit-level moderate
      continue-on-error: true
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Log in to Azure Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.ACR_REGISTRY }}
        username: ${{ vars.ACR_USERNAME }}
        password: ${{ vars.ACR_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ vars.ACR_REGISTRY }}/${{ vars.REPOSITORY_NAME }}
          ${{ vars.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate SBOM
      if: github.event_name != 'pull_request'
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://ai-chatbot-staging.example.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        # Set environment variables for docker-compose
        export NODE_ENV=staging
        export PORT=3000
        export OPENAI_API_KEY="${{ vars.STAGING_OPENAI_API_KEY }}"
        export PINECONE_API_KEY="${{ vars.STAGING_PINECONE_API_KEY }}"
        export PINECONE_ENVIRONMENT="${{ vars.STAGING_PINECONE_ENVIRONMENT }}"
        export PINECONE_INDEX_NAME="${{ vars.STAGING_PINECONE_INDEX_NAME }}"
        export AUTH_SEED="${{ vars.STAGING_AUTH_SEED }}"
        # Deploy using docker-compose
        docker-compose up -d
        # Alternative: kubectl set image deployment/ai-chatbot app=${{ needs.build.outputs.image-tag }}
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke test commands here
        # Example: curl -f https://ai-chatbot-staging.example.com/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://ai-chatbot.example.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        # Set environment variables for docker-compose
        export NODE_ENV=production
        export PORT=3000
        export OPENAI_API_KEY="${{ vars.PROD_OPENAI_API_KEY }}"
        export PINECONE_API_KEY="${{ vars.PROD_PINECONE_API_KEY }}"
        export PINECONE_ENVIRONMENT="${{ vars.PROD_PINECONE_ENVIRONMENT }}"
        export PINECONE_INDEX_NAME="${{ vars.PROD_PINECONE_INDEX_NAME }}"
        export AUTH_SEED="${{ vars.PROD_AUTH_SEED }}"
        # Deploy using docker-compose
        docker-compose up -d
        # Alternative: kubectl set image deployment/ai-chatbot app=${{ needs.build.outputs.image-tag }}
        
    - name: Run health checks
      run: |
        echo "Running health checks against production..."
        # Add health check commands here
        # Example: curl -f https://ai-chatbot.example.com/health

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic (Slack, Discord, email, etc.)
        
    - name: Notify on failure
      if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add failure notification logic